from pwn import *
import time
import random

context.log_level = 'info'

HOST = '61.14.233.78'
PORT = 3324
MAX = 2**32 - 1

def get_cipher():
    io = remote(HOST, PORT)
    io.sendlineafter(b'Input:', b'1')
    response = io.recvline().decode().strip()
    io.close()

    print(f"[+] Server response: {response}")
    return int(response.split(": ")[1])

def decrypt(cipher_int, start_time, end_time, min_len=30, max_len=80):
    for flag_len in range(min_len, max_len + 1):
        hex_str = hex(cipher_int)[2:].zfill(flag_len * 2)
        try:
            cipher = bytes.fromhex(hex_str)
        except ValueError:
            continue

        for seed in range(start_time, end_time, -1):
            random.seed(seed)
            seq = [random.randint(0, MAX) for _ in range(len(cipher))]
            flag_bytes = bytes([(c - (r % 256)) % 256 for c, r in zip(cipher, seq)])

            try:
                flag = flag_bytes.decode()
                if flag.startswith("VSL{"):
                    log.success(f"Found FLAG: {flag}")
                    log.info(f"Seed used: {seed}")
                    return flag
            except UnicodeDecodeError:
                continue
    return None

if __name__ == "__main__":
    cipher = get_cipher()
    now = int(time.time())
    flag = decrypt(cipher, now, now - 10000)

    if not flag:
        print("[-] FLAG not found. Try increasing range or check connection.")
